<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[Jon Robson]]></title>
        <description><![CDATA[Things about Jon]]></description>
        <link>http://github.com/dylang/node-rss</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Mon, 28 Sep 2020 16:25:26 GMT</lastBuildDate>
        <item>
            <title><![CDATA[Wikipedia: The strange case of the wandering semicolon]]></title>
            <description><![CDATA[<h4>And how this change and other small changes helped increased moderation on mobile</h4><p>This has also been posted on <a href="http://jdlrobson.com/posts/2020-01-14_Wikipedia--The-strange-case-of-the-wandering-semicolon-10073de4ee5.html">my personal blog</a>.</p><p>On a day in November, with the support of others¹, a somewhat absurd bug involving semicolons that took a week to fix was finally squashed. It was part of a group of changes that had led to a 47% bump in moderation tool usage on mobile. What follows is my account of this unremarkable incident as a reminder that a bug is never elementary; I will reflect on the the art of making progress in legacy code without disruption; and I will boldly hypothesize how the removal of a semicolon will improve the Wikipedia encyclopedia.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*jtTQIUP9CHf5bbieS2u0Vg.jpeg" /><figcaption>Just a semicolon smashing a window… it will make sense later. (Source: sketch by <a href="https://linzybearswings.wordpress.com/">Linz Lim</a> cc-by-sa)</figcaption></figure><h4>Disaster strikes</h4><p>This was not the usual kind of semicolon drama that developers are familiar with. I didn’t crash a site with a PHP syntax (<a href="https://wikitech.wikimedia.org/wiki/Incident_documentation/20151005-MediaWiki">at least not this time</a>). I didn’t add a semicolon in a string boundary by accident. This was a semicolon in one of our many user interfaces for editors hidden away behind the scenes. It was a semicolon that was plaguing the mobile interface, making it a little more confusing.</p><p>Thursday was when the drama began to unfold. Like a virus, semicolons were showing up in all sorts of places. If you are an editor you may have noticed some semicolons in your editing interfaces that were not there a week ago. For instance, notice these two semicolons before the date:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*H90ESA9kRn_4ONPTujHt3Q.png" /><figcaption>The emicolons we were up against (Source: own work, compiling screenshots by Zoranzoki21, Xaosflux, Huji, Formatierer and myself)</figcaption></figure><p>The bug reports were coming in — seven in total. All of them described the same underlying issue but in a different flavor. Semicolons had disappeared in some places — in some places pushing words together that shouldn’t be together! In some cases they’d appeared where they were not before. I was pointed to <a href="https://en.wikipedia.org/wiki/Wikipedia:Village_pump_(technical)#Problems_with_separators_and_semicolons_on_RecentChanges,_Watchlist,_History_and_Contributions">a long detailed conversation on English Wikipedia</a> where editors reported semicolons were appearing in unexpected places. One reported:</p><blockquote>“I’m a big fan of semicolons, used correctly; this one, I have to say, just looks weird.”</blockquote><p>Another pondered:</p><blockquote>“There could be a reason for this, perhaps?”</blockquote><p>A third added:</p><blockquote>“I don’t remember there being an announcement of this happening. Is this a glitch or an intended <em>feature</em>?”</blockquote><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*ruF1khlTsH5oUqDIH3DtOw.png" /><figcaption>This shows the extent of discussions on English Wikipedia about the semicolon. “I’m a big fan of semicolons, used correctly; this one, I have to say, just looks weird.” (Source: own work, screenshot)</figcaption></figure><p>A semicolon is clearly not a feature. It’s not something you write blog posts about. <strong><em>“Wikipedia finally removes semicolon from mobile”</em></strong> is not exactly the kind of “feature” you might see at the top of Hacker News or Reddit. However, here I am writing about it.</p><p>So, how did we get here?</p><h4>How we got here</h4><p>The team has been slowly winding down the <a href="https://www.mediawiki.org/wiki/Reading/Web/Advanced_mobile_contributions">Advanced Mobile Contributions project</a>. This project has added various moderation features to the Wikipedia mobile site². It also had strong, inflexible requirements from our department which were:</p><p>1 ) Don’t interfere with the desktop experience.</p><p>2) Don’t interfere with the standard mobile experience of ordinary users.</p><p>3) Make legacy interfaces available on mobile to users that opt in.</p><p>These requirements have been challenging to us; although mobile and desktop sites use different stylesheets, they share a lot of the same HTML. The HTML of these ten-year-old interfaces were built squarely with desktop in mind.</p><p>While some of this work has been adding links to the interface to missing moderation features, the real challenge has been making the legacy interfaces that those pages link to usable on a mobile device.</p><p>This work has involved taking complicated legacy interfaces that were built over ten years ago, and trying to mold them into things that are presentable on mobile, while at the same time making sure nobody using the desktop version noticed. While the engineer in me would ideally burn them all to the ground and rewrite them from scratch, we didn’t have enough people to commit to such a redesign. Instead, the goal was to get them into mobile in the quickest possible way “warts and all”.</p><p><a href="https://en.wikipedia.org/wiki/Special:RecentChanges?hidebots=1&amp;hidecategorization=1&amp;hideWikibase=1&amp;limit=50&amp;days=7&amp;urlversion=2">The RecentChanges moderation tool</a> (which shows edits across the site, so our editors can watch out for vandalism) is a good example. Many assumptions on the desktop site had been made about how the page should look, and those assumptions didn’t help present the same page on mobile. The desktop site used semicolons, ellipses, and brackets to separate content. It did this in raw HTML. This screenshot hopefully illustrates the problem:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*_Fm1eBDZuCCljtN2cQ38YQ.png" /><figcaption>The content in the rectangles is actually presentational HTML — not content. In mobile we wanted to stack this content, so to do that we had to move this HTML into CSS. (Source: own work)</figcaption></figure><p>While we might imagine further improvements to such a page, remember we were not looking to make too many drastic changes as we didn’t want to touch the desktop site. My company is a non-profit. The goal was to remove a semicolon not to start a revolution.</p><p>On mobile we decided to stack this information vertically, like so:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*g7kJwBkhzymRnXQ67KJn1A.png" /><figcaption>The Recent Change page we strived for on mobile screens (Source: screenshot, own work)</figcaption></figure><p>To do that, we had to get creative with CSS to ensure we kept things the same to desktop users while being able to change it based on the display media.</p><p>Luckily we found <a href="https://github.com/wikimedia/mediawiki/blob/master/resources/src/mediawiki.interface.helpers.styles.less">a solution</a> using <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries">CSS media queries</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements">CSS pseudo elements</a> to do exactly that.</p><p>After such changes <a href="https://en.m.wikipedia.org/wiki/Special:RecentChanges?hidebots=1&amp;hidecategorization=1&amp;hideWikibase=1&amp;limit=50&amp;days=7&amp;urlversion=2">the RecentChanges moderation tool</a> was looking good, but it had one nagging problem — a forgotten semicolon lingered in the UI after the page titles.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/560/1*sB8pRqFPRM25HKwLlj-yCQ.png" /><figcaption>One problem remained — a semicolon trailed the titles (see text Creatures (company) and Segra Field)</figcaption></figure><p>The follow up task “<a href="https://phabricator.wikimedia.org/T233649">Stray semicolon in RecentChanges, Watchlist, History and Contributions interface”</a> looked like <em>just</em> a one line change, continuing the work we had already done to remove unwanted “..” and unwanted parentheses.</p><p>Inspecting the HTML, I saw that the semicolon was in the raw HTML of the page. It served a purpose in the desktop version of the page by helping separate the content in each of the rows. However in the mobile mode it was redundant. I decided to move the semicolon from the HTML into a desktop only style sheet.</p><p>So I picked the bug up, I found where the semicolon was in the HTML and deleted it. Using the class name of the element that followed the semicolon, I added a CSS rule to the associated page. A fellow developer reviewed it, and like me, thought everything looked straightforward and the patch was merged. I focused on other things. As I did, the Earth orbited the sun. Light turned to darkness. Darkness to light.</p><p>The patch started to distribute out to our many websites. Then, the first bug report came in. The semicolon was not being translated into our many languages.</p><p>For those wondering how semicolons are translatable — this was news to me too — In French, a space must always proceed a semicolon, and here are some places where a semicolon is not the same semicolon we use in English:</p><blockquote>In Urdu:<br>؛;</blockquote><blockquote>In Persian:<br>؛</blockquote><p>That was relatively straightforward to fix. We have devised ways to <a href="https://github.com/wikimedia/mediawiki/blob/master/resources/src/mediawiki.interface.helpers.styles.less#L46">translate pseudo element content</a>. The fix was quickly merged and deployed by a volunteer. I thought I was done; however more bug reports came in.</p><p>My semicolon logic was still not right. I had made some bad assumptions about where the semicolon was needed. I had assumed it would always show before a timestamp, but that was not true. The ten-year-old code was badly organized and badly documented. There were various edge cases in our complicated ecosystem. I sat down and wrote a spec and some very explicit quality assurance steps to make sure the undocumented behavior was documented.</p><p><a href="https://gerrit.wikimedia.org/r/#/c/mediawiki/core/+/549919/">My final patch</a>, with the help of retroactively defining its behavior with bug reports from editors, was mostly an extensive documentation block to explain the behavior to the poor soul that would work on this code in future. The best thing a developer can do is write documentation for a future user, no matter how obvious it may seem. Developers that complain about documentation blocks need to be slapped with a wet fish.</p><p>On Tuesday, the patch had still not been merged due to the Veterans Day holiday. Nobody was around to review and deploy the patch.</p><p>Back on the discussion page, another anonymous user, possibly impatiently, asked “why is this still a problem?” The patch rolled out shortly after. Everyone involved was a little exhausted. An editor complained about semicolons that had always been there (I checked with git blame) and I wondered if anyone knew why we needed a semicolon at all? What would Kurt Vonnegut say? I decided those questions were best left for another day.</p><p>This exercise for me was a good reminder to never assume things and to treat every bug with caution, no matter how trivial it looks. There is no such thing as an easy bug. All bugs lead to other bugs.</p><h4>Reflection</h4><p><a href="https://phabricator.wikimedia.org/T219348">Much of the hard work</a> to get our moderation tools available on a mobile phone was spent carefully dissecting legacy code like this. Even though we’ve tried to minimize the disruption to desktop users, there were a few exceptions. The semicolon incident was one of three incidents that got the attention of editors.</p><p>There was the <a href="https://en.wikipedia.org/wiki/Wikipedia:Village_pump_(technical)/Archive_173#Hideous_history_page">Hideous history page incident</a>” when some editors were angry that the touch areas for our form inputs, which had been made larger. While our intentions were to follow <a href="https://ukhomeoffice.github.io/accessibility-posters/physical">accessibility recommendations</a>, some felt that the enlarged form got in the way of their workflow by pushing down other content. It should be “collapsed by default” said one.</p><p>There was the <a href="https://en.wikipedia.org/wiki/Wikipedia:Village_pump_(technical)/Archive_176#User_contributions_changes">User Contributions incident</a>, when, learning from the feedback of hideous history page incident, we collapsed a form by default, but the feedback was that we should not be collapsing the form that was a vital part of someone’s workflow. “Would prefer if it was expanded by default tbh” one user remarked. 🙄</p><p>There was also the <a href="https://en.wikipedia.org/wiki/Wikipedia:Village_pump_(technical)/Archive_176#Alarming_%22only_a_preview_message%22">Alarming “only a preview message”</a> incident when we standardized the styles of a semantically identical component to avoid shipping unnecessary bytes to mobile mode.</p><p>The crux of this is that it was impossible to please everyone during this project. but we worked hard to keep a healthy balance. It’s amazing we pulled it off.</p><p>Sometimes the things that we work on that make a difference are not newsworthy, retweet-able, technically stimulating or even noticeable. Even with the semicolon incident resolved, there was no pat on the back or thank you. Silence was the best reward. The work we do might not use the latest technologies or be glamorous, but there is an art to making progress without disruption.</p><p>I will tell anyone that is available to listen, that being a skilled software engineering is not always about your code. It doesn’t matter what frameworks you use. Ultimately it’s an exercise in problem solving and supportive collaboration between co-conspirators. It’s about <a href="https://medium.com/@dlyall/why-all-software-engineers-should-wear-a-ring-on-their-little-right-finger-31c82403b2eb?source=your_stories_page---------------------------">being responsible</a> and being honest — <a href="https://medium.com/freely-sharing-the-sum-of-all-knowledge/why-it-took-a-long-time-to-build-that-tiny-link-preview-on-wikipedia-d5bd734df8fe">a feature can take a lot of time if it’s being done well</a>. It’s about understanding if a semicolon is important or useful. And it’s about being able to have that conversation.</p><p>One of our editors <a href="https://phabricator.wikimedia.org/p/abian/">abian</a> put it so succinctly when he shared <a href="https://phabricator.wikimedia.org/T117736#5556001">these kind words</a>:</p><blockquote>It’s a great idea for users to generate content collaboratively and horizontally, but this model doesn’t favor process efficiency, user experience or innovation, so these areas require skilled professionals who fight against tradition, stagnation, short term and subjectivity.</blockquote><h4>How does this improve the encyclopedia?</h4><p>The <a href="https://en.wikipedia.org/wiki/Broken_windows_theory">Broken Windows Theory</a> is a theory that says signs of crime encourage further crime. Similarly, in Wikipedia, bad experiences encourage further bad experiences.</p><p>I believe Wikipedia’s mobile experience has suffered because many editors have been unable to use tools inside mobile that they need to carry out their work and have been forced to live in the desktop experience of the site. As a result, they haven’t used mobile. As a result, they haven’t seen the broken windows that readers see. Barely anyone complained about the stray semicolon in the mobile site, but on the other hand, when a semicolon disappeared and appeared in places on the desktop site, seven bug reports get opened and everyone seemed to care about it.</p><p>The semicolon incident gives me hope, that if broken windows are being noticed in desktop, they will soon be noticed in mobile. It was pretty cool that our editors got this riled up about a semicolon. Imagine what happens when they get riled up about an experience that is unusable on a mobile phone. There’s no longer an excuse to be an editor using the desktop site on a mobile phone³.</p><p>I have nothing to concrete to point to you except several artifacts. A semicolon has gone; a form now has input fields that are actually big enough to be touchable on a mobile screen; certain forms are now collapsible and get out of your way when you no longer need them; there are links to certain features that previously were not there.</p><p>The amount of design and product wrangling⁴ that’s gone into this project is staggering. While to the outsider observer, we’ve simply added a bunch of links to the mobile experience, we’ve done it in a remarkably elegant way that doesn’t overload the user with information. Menu hierarchies have been revisited, and we’ve frequently had to make trade-offs between beautiful and functional.</p><p>My team, with the support of some wonderful volunteers providing feedback and triaging support⁴, has been making minor tweaks to HTML and CSS across the site, and these small things make a difference and should be celebrated. The advanced mobile contributions project has been about that. It’s been about small tweaks here there and everywhere.</p><p>The mountain of small thankless changes at times have felt repetitive and uninspiring, but we churned our way through them. On their own as bug fixes they are meaningless. The end results look unremarkable. However, when combined they build something incredible but less tangible — a better mobile experience.</p><p>Of course, our data, does give something more tangible. We&#39;re seeing <a href="https://phabricator.wikimedia.org/T234559#5627577">an increase of 47% of moderation actions on mobile.</a> So clearly, every semicolon removal makes a difference.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/613/1*q7P2gin-37rr2Z0lTgQgiA.png" /><figcaption>The mobile interface for logged in users now has links to various moderation tools that you probably don’t even know about, but they are important things that keep the site alive … and now are functional on mobile. (Source: own work)</figcaption></figure><p>¹ Thanks in particular to Volker, Jan, Zoran, Xaosflux and Huji for your help in resolving the semicolon matter.</p><p>² Logged in users get more from Wikipedia. Logged in users can also opt into additional parts of the experience using <a href="https://en.m.wikipedia.org/wiki/Special:MobileOptions">our settings page</a></p><p>³ If there is a reason you feel you still cannot edit from a mobile device please let us know on the <a href="https://www.mediawiki.org/wiki/Talk:Reading/Web/Advanced_mobile_contributions">advanced mobile contributions talk page</a>:</p><p>⁴ Hat tip to Alex and Volker for juggling all the different design pieces and Olga for making sure we didn’t get stuck in the weeds (sometimes you need someone to stop you going into Semicolon swamps).</p><p>⁵ Thanks to Ammarpad, Masumrezarock100, stjn, Zoran and Pelagic and everyone else who has been involved for your input,codeand guidance to our team during these UX and standardisation efforts.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=10073de4ee5" width="1" height="1">]]></description>
            <link>https://jdlrobson.com/posts/wikipedia-the-strange-case-of-the-wandering-semicolon-10073de4ee5.html</link>
            <guid isPermaLink="true">https://jdlrobson.com/posts/wikipedia-the-strange-case-of-the-wandering-semicolon-10073de4ee5.html</guid>
            <pubDate>Wed, 15 Jan 2020 09:01:01 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Why all software engineers should wear a ring on their little right finger]]></title>
            <description><![CDATA[<p>The night before my flight, I picked up an <em>Accurist</em> wrist watch that my Grandfather, a mechanical engineer, received on his 21st birthday in 1949. When I’d received it I had been told it was broken. I felt compelled to wind it up. It stated ticking away. I wondered about the things I was engineering. Would the Wikipedia code I work on, be ticking away in 71 years time, like this watch? Would my contributions to the web e.g. blog posts on Medium still be available?</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*1PVtRfCm5H2ARvfWD4Cjqw.jpeg" /><figcaption>My Grandfather’s clock still ticking 71 years later…</figcaption></figure><p>While I walked through airport security the lady behind me asked me if I was an engineer.</p><p>I was a little surprised. I didn’t know this person and somehow they knew my profession. What had given it away? Was it because I was wearing a hoodie? (surely not). Was it the stickers on my laptop? (no my laptop was upside down). Was I wearing a nerdy t-shirt? (no). How did you know?</p><p>She pointed to her little finger on her right thing. I saw you are wearing a ring on your little finger, she said.</p><p>I laughed. Oh that’s the only finger my ring fits on, I told her. I got it when I was 15 from my mother and it’s been slowly moving down my hand. I spent 5 years with it on my right ring finger and everyone thought I was married. Traditionally, in the United Kingdom, we wear the wedding finger on the left hand and I had no idea it was the opposite for the United States. I sometimes ponder whether that was why I had so many bad dates when I dated in San Francisco.<br>How funny, she said. Maybe the engineer ring is an American and Canadian thing.</p><p>Our conversation was interrupted as I was ushered to go through the x-ray scanner. I pushed down my jeans and lifted my arms. My whole body scrutinised by thousands of invisible rays.</p><p>I bet she’s a <em>real</em> engineer, I thought as I stood in there. <em>Creating things that last. Things that are useful to humanity.</em></p><p>My bag was marked for a second check, so we were able to continue our conversation on the other side of the scanner.</p><p>Is it any kind of engineering I ask? Or only specific disciplines that wear the ring?<br>“Any,” she said. I feel vindicated.<br>“What kind of engineer are you?”<br>A chemical engineer.<br><em>See! A real kind of engineer!<br></em>The ring is supposed to signal a commitment to ethics. The idea is that if anything has passed through your hands it’s of good quality and ethically made.<br>I like that, I said. I’m happy this ring landed on my finger. It’s not an engineering ring, but I’ll think of it as one from now on.</p><p>As I sat waiting for my flight, I looked up the history of the ring. Its roots seem to be traceable back to the <a href="https://ottawacitizen.com/news/world/the-five-worst-bridge-collapses-in-canadian-history">1907 Quebec Bridge collapse which killed 75 of the 86 workers</a> due to the design of the bridge insufficiently supporting its own weight. Basically something bad happened that caused engineers to take a step back. My web searches led me to the <a href="http://www.order-of-the-engineer.org/wp-content/uploads/2009/10/Ceremony.pdf">The Order of the Engineer</a> manual.</p><p>The manual describes the symbolism and the ceremony for receiving a ring. Essentially engineers make a vow and get a ring to symbolise their commitment to that vow — to that discipline— very much how we take a vow in a marriage to honour a relationship. The words the receiver recites were apparently written by Rudyard Kipling¹(although I cannot find the source).</p><p>In the ceremony the receiver of the ring recites the following:</p><blockquote>I AM AN ENGINEER. IN MY PROFESSION I TAKE DEEP PRIDE.</blockquote><blockquote>TO IT I OWE SOLEMN OBLIGATIONS.</blockquote><p>Software engineering should be an engineering discipline to be proud of. On our best days, we make systems that humans interact with. Systems that make humans more efficient. We free up human time to do the things that matter most.</p><p>On those days we are actually no different from engineers who help build bridges that connect people, or engineers that design medicines that heal and give people more time to spend with one another.</p><p>I think the reason I felt the way I did in the x-ray scanner was I don’t see enough of this. A lot of the systems we are building are trash. We (humanity) are building systems that waste people’s time, that make people miserable, that lock people into services they can’t escape.</p><p>It doesn’t have to be this way. We need to work on things that matter and that impact humanity for the other, not yet another GIF sharing site or a site to create zombies shouting LIKESSS LIKEESSS.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/330/0*y8AzwJ371JLVYgFg" /><figcaption>The Zombies didn’t want brains. They just wanted to be liked.</figcaption></figure><p>The vow continues:</p><blockquote>AS AN ENGINEER, I PLEDGE TO PRACTICE INTEGRITY AND FAIR DEALING, TOLERANCE AND RESPECT; AND TO UPHOLD DEVOTION TO THE STANDARDS AND THE DIGNITY OF MY PROFESSION, CONSCIOUS ALWAYS THAT MY SKILL CARRIES WITH IT THE OBLIGATION TO SERVE HUMANITY BY MAKING THE BEST USE OF THE EARTH’S PRECIOUS WEALTH</blockquote><p>I like this. Software development needs more of this. More inclusiveness and more respect in the environments we build this. We need to build systems that uphold to standards — whether it be performance or Making sure we build systems that last rather than systems that fall apart in a year.</p><p>The vow finishes with:</p><blockquote>AS AN ENGINEER, I SHALL PARTICIPATE IN NONE BUT HONEST ENTERPRISES. WHEN NEEDED, MY SKILL AND KNOWLEDGE SHALL BE GIVEN WITHOUT RESERVATION FOR THE PUBLIC GOOD.IN THE PERFORMANCE OF DUTY AND IN FIDELITY TO MY PROFESSION, I SHALL GIVE MY UTMOST.</blockquote><p>As I read this I think of <a href="https://www.nbcnews.com/tech/tech-news/tech-companies-quietly-work-ice-border-crisis-continues-n885176">companies supporting unethical practices</a>, and the <a href="https://www.businessinsider.com/open-source-developers-microsoft-owned-github-cancel-ice-contract-2019-12">engineering friends that call it out</a>.</p><p>I read through these words and think they make a lot of sense for software engineers. I decide the ring on my rightmost finger is an engineering ring and I think more software engineers should wear engineering rings.</p><p>As we type on keyboards whether it be alone or during pair programming sessions they can serve as a visual reminder to ourselves to not cut corners and to write good code that lasts, is easier for the next poor software engineer to maintain and has extensive documentation.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Jzdx6if6xv7hgpOZKz40fg.jpeg" /><figcaption>A ring has the handy property of being on the very fingers we use to type code.</figcaption></figure><p>As we eat lunch together or wave together in Google Meets, we can remind ourselves to support one another, that together we are in a profession of great pride and great responsibility.</p><p>In meetings where bad decisions and are being made and ethics are being questions we can use the ring as a signal that we need to speak our minds and we should feel empowered to do so.</p><p>Why we work on things matters. How we work together matters. As does what we build, how we build it, and who we build it for. Sometimes it’s easy to forget this an I think there is much room for improvement here. Possibly a ring and a vow might be a small thing we could all to get us there.</p><p>¹ While I’ve always admired Kipling’s ability with words, given the context of this blog post, I should note that it’s unfortunate that Kipling was likely an imperialist and racist.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=31c82403b2eb" width="1" height="1">]]></description>
            <link>https://jdlrobson.com/posts/why-all-software-engineers-should-wear-a-ring-on-their-little-right-finger-31c82403b2eb.html</link>
            <guid isPermaLink="true">https://jdlrobson.com/posts/why-all-software-engineers-should-wear-a-ring-on-their-little-right-finger-31c82403b2eb.html</guid>
            <pubDate>Tue, 10 Dec 2019 16:37:05 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[A hackathon story]]></title>
            <description><![CDATA[<h3>No people, no software</h3><p>Connecting with the people your software serves is more important than anything else you could do.</p><p>The <a href="https://meta.wikimedia.org/">Wikimedia movement</a> is an international movement and a Wikimedian is someone who contributes software or free knowledge to one of its many projects (the most famous of which is Wikipedia). Wikipedians work tirelessly to create, nurture and protect content as well as provide the software that wraps it up and delivers it to readers. Working across multiple timezones in different languages in different countries with different skill-sets these people support the largest website in the world run by a non-profit.</p><p>It’s important for such people to get together to share knowledge, to share time and to share ideas. Various hackathons and editathons happen across the world every year and are open to all — whether you have no idea what we do or if you have been around for years — and financial support is available for those who might not otherwise be able to attend. I get the privilege of attending many of these events and this weekend I’m in <a href="https://www.mediawiki.org/wiki/Wikimedia_Hackathon_2019">Prague for the European hackathon</a>.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*h0lK0btlAH4s1rqp.jpg" /><figcaption>Hackathon attendees take time for the group photo [Source: <a href="https://commons.wikimedia.org/wiki/File:Wikimedia_Hackathon_Prague_2019_-_2019-05-18_-_Group_Picture_-_0391.jpg">Wikimedia Commons</a>, CC BY 4.0]</figcaption></figure><h3>Thursday</h3><p>The event begins with a social event. I spy TheDJ one of our most prolific and longest running editors who is also a software developer. I don’t think I’ve been to a hackathon where TheDJ has not been there. I give him the same hug I’ve given him in France and in Israel, ask him how he’s doing and then give him a demo of the <a href="https://www.mediawiki.org/wiki/Talk:Reading/Web/Advanced_mobile_contributions">latest project I’m working on at the Wikimedia Foundation</a>. I am reassured by the feedback he gives as he explores the prototype, and it gives me affirmation that we’ve building something that’s going to have a positive impact to users when finally deployed.</p><p>Next to TheDJ is Sage. Sage is also a long term editor, but I haven’t seen him for four years. Back then, he provided community input for a mobile web upload photo feature that eventually had to be shut down due to an influx of selfies that the community was unable to moderate. One good thing that came out of that project was <a href="https://lists.wikimedia.org/pipermail/wikimedia-l/2013-August/127709.html">a photo of a very rare disease (diphtheria)</a> and the <a href="https://en.wikipedia.org/wiki/Selfie">Wikipedia selfie article</a> which Sage created. I ask him if he’s edited the article recently and we look at it together, scrolling through it on his mobile phone. He feels the image selections could be improved, and I have a feeling he’s going to be editing the page later.</p><p>Outside, I talk to Andre, the Wikimedia bug wrangler who lives in Prague. We talk about the city he knows so well and then as I’m a little jet-lagged, I make my way to the hotel as I know very well that many of these old friends at this weekend’s hackathon have lots to catch up on and are likely to be out all night (and I’m too old to do that these days).</p><p>At the tram stop, I bump into one of my colleagues in Brazil who’s attending his first hackathon. I’ve seen his name on bug tickets and in emails but never in person so as we make our way back to hotel we talk about the maps infrastructure he supports.</p><p>I’m quite excited about the weekend. I work in a remote team with team members in Spain, England, Poland and the United States. If there’s one thing I’ve learned well through this experience, it’s that some things get done better when they are done face to face and some things are done better asynchronously. I’m curious what will come out of this hackathon.</p><h3>Friday</h3><p>The next morning, we are up bright and early and everyone is trying to decide what they want to work on during the hackathon. During the introduction session, I learn that the majority of the hackathon attendees are volunteers and a high percentage are Czech. The Wikimedia Foundation’s staff are a small minority of the people here. A few possibilities are pitched and a session to match mentors to newbies is planned.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*BdsA-fzpF312wnCN.jpg" /><figcaption>Mentor matching session in Prague. Anyone need to learn SPARQL? [<a href="https://commons.wikimedia.org/wiki/File:Wikimedia_Hackathon_2019_Matching_Program_05.jpg">Wikimedia Commons</a>, CC BY-SA 4.0]</figcaption></figure><p>After the introduction I meet Simon who’s been editing Wikipedia but wants to contribute code. There’s a few bugs in the Wikipedia feature to view images on the desktop site that he’s keen to work on, so we sit down and discuss solutions and I walk him through the code. He’s a smart man and he’s up and running in no time whatsoever. I’m hopeful we can integrate him more into the movement as I feel he would have a great impact.</p><p>I’m still not sure what to work on, other than helping enabling people to do other things, but I come across a group of editors who also use the <a href="http://inaturalist.org">iNaturalist</a> mobile app. iNaturalist is a citizen science project and online social network allowing people to share observations of biodiversity. The Wikimedians here in Prague are interested in exploring ways to share its own freely licensed content with our own projects.</p><p>The iNaturalist Wikimedians are planning a photo walk. I decide it will be a good opportunity to spend time with editors and understand what they do better and hopefully find opportunities for my hackathon project to help them do that more efficiently. Inspired by Jimmy Wales’s fundraising banners, I walk around the room with a big sheet of paper saying “come on a walk and learn about iNaturalist” and tell people “the banner campaign will only stop when I have enough people” which turns out to be surprisingly effective.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*apBv5DTCOu7fnsx0.jpg" /><figcaption>Wikimedians take a photo walk to go find critter photos for iNaturalist [<a href="https://commons.wikimedia.org/wiki/File:INaturalist_workshop.jpg">Wikimedia Commons</a>, CC BY-SA 2.0)</figcaption></figure><p>I’ve been using iNaturalist for some time, but there’s lots of people in the group that don’t know how to use it, thanks to the human billboard banner campaign, so everyone has questions and knowledge to share. I learn something new that iNaturalist defaults to a non-permissive license that doesn’t allow my photos to be used on Wikipedia. The group helps me change that and retroactively update the licenses on my existing photos. Eventually we reach a park where we take some photos using the app. Our plan is to later find ways to use these in Wikipedia.</p><p>TheDJ is migrating some legacy code to Webpack and hitting some problems so the two of us sit down to pair program and get things working. He just has one bug left to fix, but he’s unblocked now.</p><h3>Saturday</h3><p>I join the group session with the iNaturalist Wikimedians. Apparently lots of Wikipedia articles on biodiversity do not have images, yet there are images inside iNaturalist that can be used! A Wikimedian in the group describes their workflow for transferring images to Wikipedia. It involves manually downloading the image and uploading it via a form. I’m pretty convinced I can make a slightly better workflow so get to work immediately on doing just that.</p><p>Soon I have a raw and hacked together prototype that shows me images from <a href="https://inaturalist.org">iNaturalist</a> for Wikipedia articles. I just need some way to identify which articles do not have images and upload those photos. I ask an API expert how to do the former and discover the Wikidata query service and ask the image upload expert how to do the latter and am pointed at some badly documented parameters to a Wikipedia page that allows you to pre-fill upload forms. I combine everything to get a minimal viable product.</p><p>Simon is making good progress with his changes. We review and merge his first ever patch to our codebase. There’s a glow to him that’s shared by most new contributors and it’s nice to see that in person. Someone has already added him to a list of trusted contributors. Should I say thank you? he asks. There’s never any harm in saying thank you, I grin.</p><h3>Sunday</h3><p>Playing with my <a href="https://wikilovesinat.netlify.com">iNaturalist prototype</a>, I realize that most of the articles do not have photos on iNaturalist. I soon realize that I’m only getting Wikipedia articles of endangered species, so it’s no surprise that a citizen science project is also lacking in those images. I need to change my query to exclude endangered species, and for that I need to learn <a href="https://en.wikipedia.org/wiki/SPARQL">SPARQL</a>, a <a href="https://en.wikipedia.org/wiki/RDF">RDF</a> query language for databases. I make a note to myself to learn that later, but in the meantime I need to find the SPARQL expert and of course, there’s one in the room who very generously gives me ten minutes of his time to correct my SPARQL syntax.I now have a working app! I upload several images from iNaturalist effortlessly to Wikimedia Commons and include them on their corresponding articles. My contributions include a photo of a damselfly. I share the link with my new group of friends.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/800/0*0pQlSrNx54SEuSsD.jpg" /><figcaption>A damselfly uploaded by Laura Gaudette to iNaturalist, uploaded to Commons using my hackathon prototype! [<a href="https://commons.wikimedia.org/wiki/File:Enallagma_dubium_imported_from_iNaturalist_19_May_2019.jpg">Wikimedia Commons</a> CC BY 4.0]</figcaption></figure><p>I look around the room and feel grateful to be part of such a rich movement of inspired dedicated individuals. Everywhere I look, someone is helping somebody solve the latest problem, or sharing a laugh, or furiously coding to wrap up their project so they have something to show. At the showcase <a href="https://etherpad.wikimedia.org/p/Wikimedia_hackathon_showcase_2019">a wide range of projects are demoed to cheers and claps</a>. There’s an API documentation website that has been worked on alongside a remote attendee who couldn’t make it to Prague ISBN scanners; text recognition services; and an app that let’s you tell Siri to edit Wikipedia. It’s invaluable to see where everyone’s passions lie; to learn what’s possible and to find ways to make things better. I leave this hackathon energized and inspired and be part of something so unique and proud of my organization for helping make this happen.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/799/0*8tDkEVRWHYpbqa8a.jpg" /><figcaption>Hackathon project is showcased at the end of the event (<a href="https://commons.wikimedia.org/wiki/File:Wikimedia_Hackathon_2019_Showcase_Event_2.jpg">Wikimedia Commons</a>, CC BY-SA 4.0)</figcaption></figure><p>I get a message from Dario, an ex-work colleague (when you leave Wikimedia Foundation you don’t necessary leave the movement), who’s seen my iNaturalist prototype. Apparently my prototype has been enthusiastically shared by a hackathon participant and is now going viral with users uploading images. He has lots of user interface improvement suggestions. I guess I know what my next hobby project is going to be…</p><p>On the train, as I head to Budapest, I reflect on what makes a Wikimedia hackathon so special. I can only conclude that our volunteers are our customers and there’s nothing more valuable than getting face time with the people your software serves. Software doesn’t solve problems, people using the software solve problems. It’s easy to forget that sometimes.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=6a4687b1bc73" width="1" height="1"><hr><p><a href="https://medium.com/freely-sharing-the-sum-of-all-knowledge/a-hackathon-story-6a4687b1bc73">A hackathon story</a> was originally published in <a href="https://medium.com/freely-sharing-the-sum-of-all-knowledge">Down the rabbit hole</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></description>
            <link>https://jdlrobson.com/posts/a-hackathon-story-6a4687b1bc73.html</link>
            <guid isPermaLink="true">https://jdlrobson.com/posts/a-hackathon-story-6a4687b1bc73.html</guid>
            <pubDate>Thu, 30 May 2019 15:30:38 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[How we tackled technical debt at Wikipedia]]></title>
            <description><![CDATA[<div class="medium-feed-item"><p class="medium-feed-image"><a href="https://medium.com/freely-sharing-the-sum-of-all-knowledge/how-we-tackled-technical-debt-at-wikipedia-d52030065e2c?source=rss-6073643b1e41------2"><img src="https://cdn-images-1.medium.com/max/1440/0*VbSsYOpWz4ynWbyc.jpg" width="1440"></a></p><p class="medium-feed-snippet">Talking a bit helped us write off several years of technical debt</p><p class="medium-feed-link"><a href="https://medium.com/freely-sharing-the-sum-of-all-knowledge/how-we-tackled-technical-debt-at-wikipedia-d52030065e2c?source=rss-6073643b1e41------2">Continue reading on Down the rabbit hole »</a></p></div>]]></description>
            <link>https://jdlrobson.com/posts/how-we-tackled-technical-debt-at-wikipedia-d52030065e2c.html</link>
            <guid isPermaLink="true">https://jdlrobson.com/posts/how-we-tackled-technical-debt-at-wikipedia-d52030065e2c.html</guid>
            <pubDate>Wed, 13 Mar 2019 11:56:01 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[We’re going on a bug hunt (we’re not scared!)]]></title>
            <description><![CDATA[<h4>Using statsv for JavaScript error reporting</h4><p>What happens when you have a bunch of JavaScript developers frustrated by not having any JavaScript error reporting in production? They find an unexpected workaround using the tooling they have available.</p><h3>Coding in the dark</h3><p>Wikipedia and its sister sites currently have no JavaScript error reporting. We have been using <a href="https://www.elastic.co/products/logstash">logstash</a> for tracking server errors, but due to the fact we are a small volunteer-based non-profit supporting a top-10 website, some essential parts of the infrastructure end up being de-prioritized. As a result, every change we make has a high risk of causing errors. We lean heavily on <a href="https://www.mediawiki.org/wiki/Manual:JavaScript_unit_testing">JavaScript unit tests</a>, <a href="https://www.mediawiki.org/wiki/Selenium">Selenium integration</a> tests, and <a href="https://jenkins.io/">Jenkins automation servers</a> to prevent this as much as possible, but we can never be 100% sure that what we ship is bug-free.</p><p>Our team is currently in the process of investing in <a href="https://www.mediawiki.org/wiki/Reading/Web/Projects/Invest_in_the_MobileFrontend_%26_MinervaNeue_frontend_architecture/Progress?useskin=vector">the front-end architecture of our mobile sites</a>. The work is based on some tooling experiments that the same team performed earlier during the implementation of <a href="https://medium.com/p/d5bd734df8fe?source=your_stories_page---------------------------">the page previews feature</a>, <a href="https://phabricator.wikimedia.org/phame/post/view/93/extension_popups_page_previews_front-end_tooling/">nicely summarized by Joaquin Hernandez</a>. While many of the ideas and lessons learned in that project apply here, there was one big difference that concerned us — rather than building something new we were refactoring a large codebase with technical debt that already lived in production.</p><p>The lack of client-side error reporting was concerning us, as the changes we were making were quite ambitious, and we were concerned that while making those changes, the likelihood of bugs would increase. <a href="https://sentry.io/">Sentry</a> was identified as a potential solution to this problem <a href="https://phabricator.wikimedia.org/T106915">back in June 2015</a>, but the work involved in that is non-trivial and spans many teams of various disciplines and we haven’t yet been able to find the bandwidth to work on this.</p><p>Rather than being put off by this, our team realized we could use our existing infrastructure to somewhat help with this situation. We currently use <a href="https://wikitech.wikimedia.org/wiki/Graphite#statsv">statsv</a> (an HTTP beacon endpoint) to send data to <a href="https://wikitech.wikimedia.org/wiki/Graphite">Graphite</a> (a real-time graph) as a lightweight way of collecting interesting data about our clients. We use this to plot Grafana graphs that provide <a href="https://grafana.wikimedia.org/d/000000566/overview?orgId=1">at a glance metrics</a> to allow monitoring of things such as <a href="https://grafana.wikimedia.org/d/000000566/overview?panelId=2&amp;fullscreen&amp;orgId=1">opting into our mobile beta</a> and <a href="https://grafana.wikimedia.org/d/000000566/overview?panelId=16&amp;fullscreen&amp;orgId=1">errors with A/B test instrumentation</a>. We check these often <a href="https://medium.com/freely-sharing-the-sum-of-all-knowledge/why-all-developers-should-do-their-chores-feafe33fecfa">using a chore rota</a>. We figured, that at the very least, we could <strong><em>count </em></strong>JavaScript errors and use that as a metric for the quality of our output. On the long-term, having such data would allow us to put together a case study detailing the importance of such tooling in our infrastructure, by linking it back to our users and the initiatives our donors were kindly funding.</p><p>The code was simple — if an error happens on the client, increment a counter.</p><h3>Coding with the statsv light on</h3><p>Turning the error logging on was a little daunting, as we had no idea how buggy our mobile sites were. We limited our change to the mobile site only (<a href="https://medium.com/freely-sharing-the-sum-of-all-knowledge/why-does-wikipedia-in-2018-have-a-mobile-site-and-a-desktop-site-67898daee1ad">we run a separate mobile site</a>, so were able to separate this change from traffic for our desktop users) and added an off switch in case the situation was direr than our optimism hoped.</p><p>We enabled error counting on the 18th October and the errors starting rolling in (30,000 in the first five minutes). Our page views tend to fluctuate during a week, so we waited to collect a week&#39;s worth of data before drawing any conclusions. Within a week, the errors had peaked at 50,000 in a five minute period, so we now had a baseline. While high our site receives billions of monthly mobile page views so that’s not too bad.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/605/1*RHmcCwrA84XbEyHVrErE5g.png" /><figcaption>Client side errors were finally visible on our mobile site. This graph shows a 90 day period and clearly identifies where errors were introduced. [Screenshot of <a href="https://grafana.wikimedia.org">Grafana</a>, own work, <a href="https://en.wikipedia.org/wiki/en:Creative_Commons">Creative Commons</a> <a href="https://creativecommons.org/licenses/by-sa/3.0/deed.en">Attribution-Share Alike 3.0 Unported</a> license.]</figcaption></figure><p>However, then, on the 26th October, we had a new problem to solve.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/846/1*Hl69gPmZKQLf1IqHnxCm0w.png" /><figcaption>Our first error spike was pretty obvious. [Screenshot of <a href="https://grafana.wikimedia.org">Grafana</a>, own work, <a href="https://en.wikipedia.org/wiki/en:Creative_Commons">Creative Commons</a> <a href="https://creativecommons.org/licenses/by-sa/3.0/deed.en">Attribution-Share Alike 3.0 Unported</a> license.]</figcaption></figure><p>On the 26th, the errors spiked. As part of our team chores, we opened a new bug ticket to track the problem. On average, we were now seeing 50,000 every five minutes — several magnitudes more than before. It was clear that <em>something </em>had broken, but we had no idea <em>what</em> had broken. After all, all we were doing was <em>counting</em> errors. We had no knowledge of the <a href="https://en.wikipedia.org/wiki/Stack_trace">stack traces </a>which would help us identify what code was causing the error and didn’t even know the language, URL or web browser it was happening on! Obviously, we knew this before enabling this metric and supposedly had made peace with this, only there was one thing we hadn’t counted on. We were developers...</p><h3>Using the tooling we had to track down the error</h3><p>For some reason, whenever hit with a problem, with the odds stacked against me, I’m always drawn to the childhood classic “<a href="https://en.wikipedia.org/wiki/We%27re_Going_on_a_Bear_Hunt">We’re going on a bear hunt</a>” by <a href="https://en.wikipedia.org/wiki/Michael_Rosen">Michael Rosen</a> (adapted from an American folk song). That book instilled into me at an early age, that any problem can be overcome by thinking outside the box, even the unusual practice of hunting bears. If you’re a parent of young children, I thoroughly recommend you grab a copy.</p><p>When I became a developer, I would often channel Michael Rosen during conversations about scope creep or edge cases. If you’ve ever worked with a team of developers, especially if you are a product owner, you will have noticed that we are a curious bunch, and if you distract us with a shiny problem, we’ll bite, and even if you don’t want us to… <a href="https://blog.wikimedia.org/2017/06/15/mysterious-performance-improvement/">we’ll find the reason</a>.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Qp4aQg2FdHLWIeiLEf_clQ.jpeg" /><figcaption><a href="https://en.wikipedia.org/wiki/We%27re_Going_on_a_Bear_Hunt">We’re going on a bear hunt</a> reminds us from an early age that any obstacles can be overcome if you think of them in different ways. [source: <a href="https://www.aliexpress.com/item/We-re-Going-on-a-Bear-Hunt-By-Michael-Rosen-English-Stories-Picture-card-Book-For/32861526133.html">aliexpress</a>, Illustrations by <a href="https://en.wikipedia.org/wiki/Helen_Oxenbury">Helen Oxenbury</a>, license: fair use]</figcaption></figure><p>So, hit with the problem of an additional 30,000 client-side errors over the period of five minutes, even though early on, we recognized that counting errors would only tell us “when” an error occurred rather than “why”, it seemed worthy of further investigation. The only question was how.</p><p>A work colleague outside our team in a casual conversation pointed out that statsv endpoints were GET requests, and thus went through <a href="https://wikitech.wikimedia.org/wiki/File:Pageview_@_Wikimedia_(WMF_Analytics_lightning_talk,_June_2015).pdf?page=6">our infrastructure to count page views</a>. Armed with this information, it seemed we’d be able to glean some useful information about the errors we were seeing, based on data we were collecting for the purposes of monitoring site traffic.</p><p>Although we were only <em>counting</em> client-side errors, each of the requests being made to our statsv beacon to count these errors had a host of meta-data associated — notably, the Wikipedia language and domain that was being used; the referrer URL and most importantly the user browser agent.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/800/1*kpCiPunkvFswb1bbzc8Ocg.jpeg" /><figcaption>How we collect page views. [Wikimedia Foundation / Joseph Allemandou <a href="https://en.wikipedia.org/wiki/en:Creative_Commons">Creative Commons</a> <a href="https://creativecommons.org/licenses/by-sa/3.0/deed.en">Attribution-Share Alike 3.0 Unported</a> license.]</figcaption></figure><p>By looking at the client side errors for a single day, we could run a series of <a href="https://en.wikipedia.org/wiki/Apache_Hive">Apache Hive</a> queries to give more context on the errors we were collecting for a single day. I did just that, to see if I could glean any further information. I ran the following Hive queries:</p><pre>#ALL ERRORS grouped by project:</pre><pre>select uri_host,namespace_id,count(*) from webrequest where day = 30 and month = 10 and year = 2018 and uri_path LIKE &#39;%beacon%&#39; and uri_query LIKE &quot;%WebClientError%&quot; group by uri_host,namespace_id;</pre><pre># all errors grouped by user agent:<br>select uri_host,user_agent_map[&#39;os_family&#39;],user_agent_map[&#39;browser_family&#39;], count(*) from webrequest where day = 30 and month = 10 and year = 2018 and uri_path LIKE &#39;%beacon%&#39; and uri_query LIKE &quot;%WebClientError%&quot; group by uri_host,user_agent_map[&#39;os_family&#39;], user_agent_map[&#39;browser_family&#39;];</pre><pre># all errors grouped by referrer:<br>select uri_host,referer, count(*) from webrequest where day = 30 and month = 10 and year = 2018 and uri_path LIKE &#39;%beacon%&#39; and uri_query LIKE &quot;%WebClientError%&quot; group by uri_host,referer;</pre><p>Thankfully, these queries did help. While, grouping the errors by project did not shed much light, it ruled out the possibility that the bug was based on language or language-specific customizations. Likewise, grouping by referrer (e.g. the URL the user was on at the time they experienced the bug) showed no real trend — there were no problematic pages triggering more errors than the other. The user agent was the most valuable, the query helped me notice that the majority of the issues were coming from iOS (the iPhone), so I drilled down further looking at iOS by running the following Hive query:</p><pre>select uri_host,user_agent_map[&#39;os_family&#39;],user_agent_map[&#39;browser_family&#39;],user_agent_map[&#39;browser_major&#39;], user_agent_map[&#39;os_major&#39;], count(*) from webrequest where day = 30 and month = 10 and year = 2018 and user_agent_map[&#39;browser_family&#39;] = &#39;Mobile Safari&#39; and uri_path LIKE &#39;%beacon%&#39; and uri_query LIKE &quot;%WebClientError%&quot; group by uri_host,user_agent_map[&#39;os_family&#39;], user_agent_map[&#39;browser_family&#39;], user_agent_map[&#39;browser_major&#39;], user_agent_map[&#39;os_major&#39;];</pre><p>This Hive query showed me clearly that the bug was most prominent in iOS Safari (in fact 70% of all our errors were coming from this browser). Using <a href="https://browserstack.com">browserstack</a> (a tool that allows cross-browser testing), and my knowledge of the mobile stack (and <a href="https://www.mediawiki.org/wiki/MediaWiki_1.33/wmf.1">code that had recently changed in the deploy</a> that led to the bug), I took a look at one of the most common referrers and quickly I was able to replicate the bug quite quickly (on page load) — and thus hone in on the bug —<a href="https://phabricator.wikimedia.org/T208605"> an issue with some JavaScript templating code</a>.</p><h3>A happy ending</h3><p>The bug was squashed promptly and the client side errors reverted back to its “normal” baseline shortly after we deployed the fix. We all sighed in relief.</p><p>One of the outcomes of our mobile site investment project is to improve test coverage. Not only had we shown that our error counting could identify new bugs, but we’d shown the impact of identifying and fixing existing bugs.</p><p>Since that issue in October, we’ve also identified two other issues via the same debugging method. In January we debugged and squash <a href="https://phabricator.wikimedia.org/T209882#4868432">a much more impactful issue related to cached HTML</a> as well as an issue with a volunteer-run <a href="https://phabricator.wikimedia.org/T214330">banner campaign</a>.</p><p>Hopefully, sometime soon, I can write about how Wikipedia has zero client-side errors.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*iLlr3Ti9u3BVUMBs-LbkmQ.png" /><figcaption>The last 90 days have shown 2 eventful error spikes. The spikes upwards represent new errors and the spikes downwards represent fixes. The errors represent 100% of mobile’s client side errors [Screenshot of <a href="https://grafana.wikimedia.org">Grafana</a>, own work, <a href="https://en.wikipedia.org/wiki/en:Creative_Commons">Creative Commons</a> <a href="https://creativecommons.org/licenses/by-sa/3.0/deed.en">Attribution-Share Alike 3.0 Unported</a> license.]</figcaption></figure><h3>Takeaways</h3><p>Obviously, counting errors with statsv is not a sustainable way to run a website, and if you are being sent to this URI being told that you need to install statsv to count errors immediately, please kindly point that person to this section. If you want to count errors and have the resourcing to do such a thing, I highly recommend <a href="https://github.com/getsentry/sentry-javascript">Sentry</a> and/or its client-side SDK. The Wikimedia Foundation needs to get Sentry up and running, and we will catch up with doing that at some point in the future as soon as we can herd the correct team of people together.</p><p>So, what is the point of this article, if not to tell you about how to debug errors with statvs? Maybe it’s a reminder that engineers are paid to solve problems and that sometimes, being an engineer involves thinking outside the box and using the tooling you already have in creative unexpected ways. When we set out to count errors, as engineers we were not satisfied that it was the right way forward, but given it was low effort, we’ve already justified that work and more.</p><p>In this particular case, doing something unexpected with inappropriate tooling, was a great way to help non-technical people understand why JavaScript errors were something we should be capturing by making a hidden and unknown problem visible.</p><p>As anyone who has gone on a bear hunt will tell you, mountain-like problems can always be climbed given enough time and in absence of a bridge through the middle, while it’s tempting to give up altogether, sometimes we need to find other ways to get our message through.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=b4057e4a91d2" width="1" height="1"><hr><p><a href="https://medium.com/freely-sharing-the-sum-of-all-knowledge/were-going-on-a-bug-hunt-we-re-not-scared-b4057e4a91d2">We’re going on a bug hunt (we’re not scared!)</a> was originally published in <a href="https://medium.com/freely-sharing-the-sum-of-all-knowledge">Down the rabbit hole</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></description>
            <link>https://jdlrobson.com/posts/were-going-on-a-bug-hunt-we-re-not-scared-b4057e4a91d2.html</link>
            <guid isPermaLink="true">https://jdlrobson.com/posts/were-going-on-a-bug-hunt-we-re-not-scared-b4057e4a91d2.html</guid>
            <pubDate>Mon, 11 Feb 2019 15:01:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Why all developers should do their chores]]></title>
            <description><![CDATA[<h4>How technical debt can become a shared responsibility</h4><p>MediaWiki, the software that powers Wikipedia, is afflicted with the beautiful dichotomy that plagues many open source projects — it was built over a decade ago with lots of enthusiasm and many fantastic ideas, but with fewer concerns about code quality and long-term maintenance.</p><p>It should not come as a surprise that MediaWiki, while powering one of the most important resources on the web, has also accumulated significant amounts of technical debt. To cope with this, my team at the Wikimedia Foundation — the organization now charged with stewarding MediaWiki — found a ritual that allowed us to decrease the numbers of errors and regressions, improve our efficiency, maintain a certain level of quality, and evolve and bond as a team. Here’s our story.</p><h3>Working at scale</h3><p>My core team consists of a tech lead (myself), a product owner, an engineering manager, a designer, and four other developers. The eight of us maintain <a href="https://medium.com/freely-sharing-the-sum-of-all-knowledge/why-does-wikipedia-in-2018-have-a-mobile-site-and-a-desktop-site-bc2982f30fb9">the entire Wikipedia mobile website, the page previews feature that we shipped to desktop several months ago</a>, and other bits of critical but relatively stable infrastructure. We’re actually spread quite thin and keeping on top of problems can be pretty difficult.</p><p>Even so, I think we do an incredible job.</p><h3>Infrastructure and tooling</h3><p>Since Wikipedia’s conception in 2001 (17 years ago!), the supporting infrastructure has gone through many positive transformations. It was only in 2009, with a new strategic plan and growth of the Foundation, that the infrastructure to support our MediaWiki based production started to become fleshed out. Integration tests (Selenium) were added (<a href="https://blog.wikimedia.org/2012/05/04/engineering-april-2012-report/">conceived in 2012</a>); <a href="https://en.wikipedia.beta.wmflabs.org/wiki/Transcluded_page">a production-like beta cluster</a> was added (2012); <a href="https://wikitech.wikimedia.org/wiki/Logstash">Logstash</a> was added for server-side error reporting; a performance team was created to set up infrastructure for monitoring and improving performance (<a href="https://webpagetest.org">WebPageTest</a> and tooling to collect <a href="https://www.w3.org/TR/navigation-timing/">NavigationTiming</a> data from real users); and we switched from <a href="https://blogs.gnome.org/aklapper/2014/12/17/welcome-phabricator/">Bugzilla to Phabricator </a>to improve how we curate bug reports.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/592/1*eZi7e7G_v3mOn181DhZiaA.png" /><figcaption>We use Selenium to monitor browser tests on the products we maintain. This shows a particularly stormy day when <a href="https://integration.wikimedia.org/ci/view/Reading-Web/">our staging infrastructure </a>was down. [Screenshot of <a href="https://integration.wikimedia.org/ci/view/Beta/">Jenkins</a>, own work, <a href="https://en.wikipedia.org/wiki/en:Creative_Commons">Creative Commons</a> <a href="https://creativecommons.org/licenses/by-sa/3.0/deed.en">Attribution-Share Alike 3.0 Unported</a> license.]</figcaption></figure><p>This tooling has been essential for us to measure the health of the site and keep the team accountable. The tooling is by no means complete. Notably, there is no infrastructure for collecting of client-side errors, although <a href="https://sentry.io/for/javascript/">Sentry</a> has been proposed.</p><h3>Infrastructure is only good if you look at it</h3><p>Despite the fact we have all these tools to aid us to maintain quality, the tooling is only good if you use it. In the early days, if browser tests failed, emails would be sent to point people hoping that they would deal with them; Logstash errors would only go noticed if they caused trouble during deployments or someone had taken the initiative to look at them; it was up to bug wranglers to make sure bug reports got to the right people; and up to the performance team to tell product teams that their work was causing unacceptable performance regressions.</p><p>It would be great if failing browser tests blocked deployments, but they don’t.</p><p>It would be great if error spikes in server-side errors automatically created a bug and routed it to the right person, but they don’t.</p><p>When you work for a non-profit maintaining a site at scale and trying to live up to its values of openness and transparency, one of the big downsides is that you can’t afford every single tool offered to you and even if you could you don’t necessarily have enough people to stand it up and maintain it.</p><p>These kind of problems were causing a lot of stress to people in my team as our team cares a lot about our product and our output.</p><p>For a period of time my team often felt:</p><ul><li>vexed when nobody had noticed a regression in production caught by our browser tests.</li><li>concerned by any unusual and un-investigated errors in Logstash.</li><li>inadequate when we began drowning in triaging tickets from community members</li><li>upset about all the unknown client-side errors that our users were surely experiencing but not able to tell us.</li></ul><p>During one of our team retrospectives, (which we have every two weeks), we shared these frustrations and why we cared about them. Finally, we talked about ways of sharing that burden.</p><h3>Enter the chores list!</h3><p>Our scrum master, Max Binder, proposed a solution back in December 2016 (2 years ago!) that had been enjoying success in our iOS team (originally conceived by <a href="https://blog.wikimedia.org/2018/03/28/pming-in-public/">Josh Minor</a>).</p><p>The solution was to define a list of things that were important to the team, which we named the <a href="http://Reading/Web/Chore_list">Chore list</a>. The plan was each team member would take turns to go through that list daily to check things in the list were of the standard we expected. A time-box was set up to set the expectation that we shouldn’t spend too long going through that every growing list and to help us prioritise what needed to be looked at at any given time.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/320/1*rEe1gpQ8jBs812Xr-C_rGQ.gif" /><figcaption>A non-technical re-enactment of how a chores list might work in a team of dogs. Source: <a href="https://imgur.com/PDNu8vl">imgurl</a>, thund3rbolt License: Fair use</figcaption></figure><h3>Executing a chores list</h3><p>When we began the experiment, we used a mailing list to report on the current state. Many of these emails never got replies, so the sender was never clear if someone read and digested them, but when we brought this up in our <a href="https://en.wikipedia.org/wiki/Retrospective#Software_development">team retrospectives</a> what we actually found was people were using them and finding them useful!</p><p>When there were conversations on the emails, these conversations were quite useful, even if it was just an opportunity for our product owner to understand the severity of the latest regression and understand its priority or to explain a spike in a graph we were seeing. Sometimes the chores subject was something as simple as “Chores 13th July — everything is awesome EOM”.</p><p>The doing of chores, like any list of chores, has required discipline and engagement from the team.</p><p>There have been many days where people “forgot” or “didn’t have time”. We have found that flagging (without blame!) this kind of neglect in team rituals such as retrospectives and stand-ups has helped remedy the problem quite quickly. The important thing is that as a whole the team sees the benefit in this ritual and is keen to keep the ritual alive.</p><p>It’s been really important for the team to adapt as our responsibilities have shifted and we’ve encountered new experiences. On one occasion our analytics team flagged to us that we were causing a large chunk of errors that was clogging up their analytics pipeline. They pointed us to <a href="https://grafana.wikimedia.org/dashboard/db/reading-web-dashboard?orgId=1&amp;panelId=16&amp;fullscreen">a graph measuring errors </a>that we didn’t know existed. After fixing this problem, we added a new chore to the list to check that exact graph to make sure it didn’t happen again.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*yTtRFEObidQ8CP1BgLDREQ.png" /><figcaption>That feeling when you know the big spike in errors on the left was because of something your team did… [Screenshot of <a href="http://grafana.wikimedia.org">Grafana</a>, own work, <a href="https://en.wikipedia.org/wiki/en:Creative_Commons">Creative Commons</a> <a href="https://creativecommons.org/licenses/by-sa/3.0/deed.en">Attribution-Share Alike 3.0 Unported</a> license.]</figcaption></figure><p>Even our chores themselves have got maintenance — in particular, many of the queries we use to identify tasks we are responsible for working on; identify code that needs reviewing and identify errors that we are on the hook for fixing have been tweaked and improved for the next person.</p><p>The process also got maintenance. The email format we used changed in various ways over time until eventually we settled on a wiki page.</p><p>With email, we found several benefits:</p><ul><li>it was useful to pull in people from other teams</li><li>we got to send each other GIFs</li></ul><p>However we faced challenges with some basic human problems.</p><ul><li>We struggled to agree on whether the subject header date format should be “Chores: Thursday, 16th March”, or “Chores 16th March” or “Chores 16/03/18” (you get the idea).</li><li>The lack of a consistent subject header, made it hard for us to access historical information</li><li>This also made it hard for us to set up the appropriate email filters for a daily email.</li><li>Half the team really liked emails laid out in rich text format tables while the other half wanted plain text.</li></ul><p>These small problems, aside, more crucially, we were noticing larger problems.</p><ul><li>We were duplicating efforts in debugging the same bugs our browser tests had uncovered</li><li>Certain chores were being neglected for weeks without us realizing</li></ul><figure><img alt="" src="https://cdn-images-1.medium.com/max/800/1*UpusRHVET1Xg92l04_eUFQ.png" /><figcaption>Chore wheel over e-mail created problems with subject formatting and format. [Screenshot of <a href="http://inbox.google.com">Google Inbox</a>, own work, <a href="https://en.wikipedia.org/wiki/en:Creative_Commons">Creative Commons</a> <a href="https://creativecommons.org/licenses/by-sa/3.0/deed.en">Attribution-Share Alike 3.0 Unported</a> license.]</figcaption></figure><p>We kicked ourselves a little, when we realized that switching to a wiki format removed all of those issues. We maintained a single email thread to allow the benefit of side chat and GIF usage (very important!) and in addition to this we got to dog food our products.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*msnxdBBMEc_YUlFt-XJF_A.png" /><figcaption>Chores in the wiki page format [Screenshot, own work, <a href="https://en.wikipedia.org/wiki/en:Creative_Commons">Creative Commons</a> <a href="https://creativecommons.org/licenses/by-sa/3.0/deed.en">Attribution-Share Alike 3.0 Unported</a> license.]</figcaption></figure><h3>Why every team should have its own chore list</h3><p>One of the greatest benefits of sharing this load has been the shared responsibility and awareness of what quality means in our team.</p><p>Two years later, we still use this list, but the list like any good wiki page is no reflection of its original state, having had over 100 edits from a variety of team members.</p><p>Some of the measurable benefits of having a chores list include:</p><ul><li>When we started out there were hundreds of server-side errors being experienced by users in obscure parts of our interface. Now, two years later, it’s quite rare for one to show up there, which feels good.</li><li>Bugs are rarely making it to production (we’ve experienced less emergency hot fixing)</li><li>We’ve become more aware of how banners from our fundraising team and volunteers severely impact our performance (e.g. <a href="https://phabricator.wikimedia.org/T203408">this bug</a>)</li><li>Our backlog <a href="https://phabricator.wikimedia.org/maniphest/report/burn/?project=PHID-PROJ-zzvpaq4lhxoz4fx2ymwj">has shrunk from around 400 to 153 open bugs</a> thanks to a shared responsibility in triaging.</li></ul><figure><img alt="" src="https://cdn-images-1.medium.com/max/651/1*y_BjtVTrV_S7-tJEW4PlVg.png" /><figcaption>Our backlog has shrunk to a much more manageable rate since we began our chores rota in 2016. [Screenshot, own work, <a href="https://en.wikipedia.org/wiki/en:Creative_Commons">Creative Commons</a> <a href="https://creativecommons.org/licenses/by-sa/3.0/deed.en">Attribution-Share Alike 3.0 Unported</a> license.]</figcaption></figure><p>While less measurable, the shared responsibility has had a positive impact on the team dynamic.</p><p>It’s been beautiful to watch the team self-organize around defining code quality.</p><p>Our designer, added a chore to help prioritizes and organize design the backlog. After we launched a PDF rendering service, one of our engineers added a chore to monitor npmjs.com for new package releases. After several rounds of vacations, meaning chores were not being done, the team in retro decided to add a chore to inform the group who was next. This made it transparent not only that chores were not being done, but who was not doing them to the rest of the team.</p><p>If your software development team doesn’t have one already, I think a chores list is a great and inexpensive way to get your team thinking constantly about quality and constantly striving to improve. Having one has sure helped mine.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/700/1*h4jLLwzzzEFGSpMqGBLGcQ.gif" /><figcaption>Our team really “<a href="https://en.wiktionary.org/wiki/up_the_ante">ups the ante</a>” and bonds in rather creative ways. Here’s a mash up of our team and some puppies. Source: <a href="https://alexhollender.com/">Alex Hollender</a> (License: Fair use).</figcaption></figure><h4>Footnotes</h4><p>Our <a href="https://www.mediawiki.org/wiki/Reading/Web/Chores?">chores list</a> is entirely public, so feel free to dig into all the interesting data we monitor, including the <a href="https://grafana.wikimedia.org/dashboard/db/reading-web-dashboard?orgId=1">grafana dashboard</a>. Let me know in the comments if your team does (or is thinking of doing) something similar. I’d love to hear from you!</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=feafe33fecfa" width="1" height="1"><hr><p><a href="https://medium.com/freely-sharing-the-sum-of-all-knowledge/why-all-developers-should-do-their-chores-feafe33fecfa">Why all developers should do their chores</a> was originally published in <a href="https://medium.com/freely-sharing-the-sum-of-all-knowledge">Down the rabbit hole</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></description>
            <link>https://jdlrobson.com/posts/why-all-developers-should-do-their-chores-feafe33fecfa.html</link>
            <guid isPermaLink="true">https://jdlrobson.com/posts/why-all-developers-should-do-their-chores-feafe33fecfa.html</guid>
            <pubDate>Mon, 14 Jan 2019 16:57:50 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Twelve days of Brexmas]]></title>
            <description><![CDATA[<h4>A Christmas song for all those who are bored of Brexit</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/640/1*TzVm1RWWNEhycn-9jJixVg.jpeg" /><figcaption>May turns on the Christmas lights, on the 6th day of Xmas; Source: <a href="https://www.flickr.com/photos/number10gov/46213738401/in/dateposted/">Flickr</a></figcaption></figure><p>On the 1st day of Brexmas<br>Theresa May gave to me:<br>an un-recoverable economy</p><p>On the 2nd day of Brexmas<br>Theresa May gave to me:<br>Two independence referendums<br>and an un-recoverable economy</p><p>On the 3rd day of Brexmas<br>Theresa May gave to me:<br>Free movement gone<br>Two independence referendums<br>and an un-recoverable economy</p><p>On the 4th day of Brexmas<br>Theresa May gave to me:<br>False unkept promises<br>Free movement gone<br>Two independence referendums<br>and an un-recoverable economy</p><p>On the 5th day of Brexmas<br>Theresa May gave to me:<br>High import taxes<br>False unkept promises<br>Free movement gone<br>Two independence referendums<br>and an un-recoverable economy</p><p>On the 6th day of Brexmas<br>Theresa May gave to me:<br>Sexy blue and gold passports<br>High import taxes<br>False unkept promises<br>Free movement gone<br>Two independence referendums<br>and an un-recoverable economy</p><p>On the 7th day of Brexmas<br>Theresa May gave to me:<br>Severed ties with Brussels<br>Sexy blue and gold passports<br>High import taxes<br>False unkept promises<br>Free movement gone<br>Two independence referendums<br>and an un-recoverable economy</p><p>On the 8th day of Brexmas<br>Theresa May gave to me:<br>Hate speech a rising<br>Severed ties with Brussels<br>Sexy blue and gold passports<br>High import taxes<br>False unkept promises<br>Free movement gone<br>Two independence referendums<br>and an un-recoverable economy</p><p>On the 9th day of Brexmas<br>Theresa May gave to me:<br>Nine factories closing<br>Hate speech a rising<br>Severed ties with Brussels<br>Sexy blue and gold passports<br>High import taxes<br>False unkept promises<br>Free movement gone<br>Two independence referendums<br>and an un-recoverable economy</p><p>On the 10th day of Brexmas<br>Theresa May gave to me:<br>Ten Downing weeping<br>Nine factories closing<br>Hate speech a rising<br>Severed ties with Brussels<br>Sexy blue and gold passports<br>High import taxes<br>False unkept promises<br>Free movement gone<br>Two independence referendums<br>and an un-recoverable economy</p><p>On the 11th day of Brexmas<br>Theresa May gave to me:<br>Eleven politicians a sniping<br>Ten Downing weeping<br>Nine factories closing<br>Hate speech a rising<br>Severed ties with Brussels<br>Sexy blue and gold passports<br>High import taxes<br>False unkept promises<br>Free movement gone<br>Two independence referendums<br>and an un-recoverable economy</p><p>On the 12th day of Brexmas<br>Theresa May gave to me:<br>Twelve plus rebelling Tories<br>Eleven politicians a sniping<br>Ten Downing weeping<br>Nine factories closing<br>Hate speech a rising<br>Severed ties with Brussels<br>Sexy blue and gold passports<br>High import taxes<br>False unkept promises<br>Free movement gone<br>Two independence referendums<br>and an un-recoverable economy.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=72f856ad29d" width="1" height="1">]]></description>
            <link>https://jdlrobson.com/posts/twelve-days-of-brexmas-72f856ad29d.html</link>
            <guid isPermaLink="true">https://jdlrobson.com/posts/twelve-days-of-brexmas-72f856ad29d.html</guid>
            <pubDate>Wed, 12 Dec 2018 16:08:32 GMT</pubDate>
        </item>
    </channel>
</rss>